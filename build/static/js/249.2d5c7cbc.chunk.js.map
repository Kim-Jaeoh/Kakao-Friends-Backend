{"version":3,"file":"static/js/249.2d5c7cbc.chunk.js","mappings":"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","sources":["components/product/ProductInnerList.jsx","hooks/useBasketToggle.jsx","hooks/useInfinityScroll.jsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { Link } from \"react-router-dom\";\nimport { useBasketToggle } from \"../../hooks/useBasketToggle\";\nimport { BsBag, BsBagFill } from \"react-icons/bs\";\nimport { useQueryClient } from \"react-query\";\nimport useInfinityScroll from \"../../hooks/useInfinityScroll\";\n\nconst ProductInnerList = ({ api }) => {\n  const { toggleIcon, currentBasket } = useBasketToggle(); // 장바구니 커스텀 훅\n  const { ref, dataList: dataItem } = useInfinityScroll(api, 16); // 무한스크롤 커스텀 훅\n  // const queryClient = useQueryClient();\n\n  // // 라우터 이탈 시 데이터 clean up으로 직접 리셋\n  // useEffect(() => {\n  //   return () => {\n  //     queryClient.setQueryData([\"infiniteProduct\", api], (data) => ({\n  //       pages: data?.pages.slice(0, 1),\n  //       pageParams: data?.pageParams?.slice(0, 1),\n  //     }));\n  //   };\n  // }, [api]);\n\n  return (\n    <ListBox>\n      {dataItem &&\n        dataItem?.pages?.flat().map((list, index) => (\n          <ListItem key={index}>\n            <ListItemNumberBox>\n              {index + 1 < 4 ? (\n                <ListItemRank>{index + 1}</ListItemRank>\n              ) : (\n                <ListItemNumber>{index + 1}</ListItemNumber>\n              )}\n            </ListItemNumberBox>\n            <ProductBox>\n              <Link to={`/detail/${list.product}`}>\n                <ProductImage>\n                  <img src={list.image} alt={list.title} loading=\"lazy\" />\n                </ProductImage>\n              </Link>\n              <ProductTextBox>\n                <ProductText>\n                  <strong>{list.title}</strong>\n                </ProductText>\n                <ProductPrice>\n                  <span>{list.price}</span>원\n                </ProductPrice>\n                <ProductBag onClick={() => toggleIcon(list)}>\n                  {currentBasket?.filter((obj) => obj.product === list.product)\n                    .length > 0 ? (\n                    <BsBagFill />\n                  ) : (\n                    <BsBag />\n                  )}\n                </ProductBag>\n              </ProductTextBox>\n            </ProductBox>\n          </ListItem>\n        ))}\n\n      <div\n        ref={ref}\n        style={{\n          position: \"absolute\",\n          bottom: \"450px\",\n        }}\n      />\n    </ListBox>\n  );\n};\n\nexport default ProductInnerList;\n\nconst ListBox = styled.ol`\n  margin: 2px 14px 0 13px;\n  font-size: 0;\n\n  @media screen and (min-width: 640px) {\n    margin: 10px 12px 0;\n  }\n`;\n\nconst ListItem = styled.li`\n  display: inline-block;\n  position: relative;\n  width: 50%;\n  padding: 20px 7px 20px 6px;\n  vertical-align: top;\n  box-sizing: border-box;\n\n  @media screen and (min-width: 640px) {\n    padding-left: 8px;\n    padding-right: 8px;\n  }\n`;\n\nconst ListItemNumberBox = styled.div`\n  position: absolute;\n  left: 13px;\n  top: 27px;\n  z-index: 1;\n  width: 24px;\n  font-size: 16px;\n  height: 24px;\n  text-align: center;\n  font-weight: bold;\n\n  @media screen and (min-width: 640px) {\n    left: 19px;\n    top: 31px;\n  }\n`;\n\nconst ListItemNumber = styled.span`\n  display: block;\n  border-radius: 4px;\n  font-size: 14px;\n  line-height: 24px;\n  font-weight: 700;\n  color: #fff;\n  background-color: #aeaeaf;\n`;\n\nconst ListItemRank = styled(ListItemNumber)`\n  background-color: #3c404b;\n`;\n\nconst ProductBox = styled.div`\n  min-height: 260px;\n`;\n\nconst ProductImage = styled.div`\n  overflow: hidden;\n  position: relative;\n  border-radius: 6px;\n  padding-top: 100%;\n  cursor: pointer;\n\n  ::after {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    content: \"\";\n    background-color: rgba(0, 0, 0, 0.04);\n  }\n\n  img {\n    display: block;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nconst ProductTextBox = styled.div`\n  position: relative;\n`;\n\nconst ProductText = styled.div`\n  padding-top: 10px;\n  strong {\n    padding-right: 32px;\n    display: block;\n    display: -webkit-box;\n    overflow: hidden;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 20px;\n    color: #747475;\n    max-height: 40px;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    word-break: break-all;\n  }\n`;\n\nconst ProductPrice = styled.em`\n  display: inline-block;\n  padding-top: 4px;\n  font-weight: 700;\n  font-size: 15px;\n  line-height: 24px;\n  vertical-align: top;\n\n  span {\n    font-size: 16px;\n  }\n`;\n\nconst ProductBag = styled.button`\n  position: absolute;\n  top: 5px;\n  right: -4px;\n  bottom: auto;\n  padding: 6px;\n\n  svg {\n    width: 20px;\n    height: 20px;\n    color: #909092;\n  }\n`;\n","import { doc, onSnapshot, updateDoc } from \"firebase/firestore\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { dbService } from \"../fbase\";\nimport { setBasket } from \"../reducer/user\";\n\nexport const useBasketToggle = () => {\n  const dispatch = useDispatch();\n  const [myInfo, setMyInfo] = useState({});\n  const [docRef, setDocRef] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(false);\n  const currentBasket = useSelector((state) => state.user.basket);\n  const currentUser = useSelector((state) => state.user.currentUser);\n\n  useEffect(() => {\n    if (currentUser.uid) {\n      setDocRef(doc(dbService, \"userInfo\", currentUser.uid.toString()));\n    }\n  }, [currentUser.uid]);\n\n  // Firebase 본인 정보 가져오기\n  useEffect(() => {\n    if (docRef) {\n      onSnapshot(docRef, (doc) => {\n        setMyInfo(doc.data());\n        setIsLogin(true);\n      });\n    }\n    // return () => setIsLogin(false);\n  }, [docRef]);\n\n  const toggleIcon =\n    // useCallback(\n    async (itemId, quanity) => {\n      const currentFinded = currentBasket?.find(\n        (item) => item.product === itemId.product\n      );\n\n      if (currentFinded === undefined) {\n        dispatch(\n          setBasket([\n            {\n              id: itemId.id,\n              product: itemId.product,\n              title: itemId.title,\n              price: itemId.price,\n              image: itemId.image,\n              quanity: quanity ? quanity : 1,\n              check: true,\n            },\n            ...currentBasket,\n          ])\n        );\n      } else {\n        const currentFilter = currentBasket?.filter(\n          (item) => item.product !== itemId.product\n        );\n        dispatch(setBasket(currentFilter));\n      }\n\n      if (currentUser.uid) {\n        const fbFinded = myInfo?.basket?.find(\n          (item) => item.product === itemId.product\n        );\n        if (fbFinded === undefined) {\n          await updateDoc(docRef, {\n            basket: [\n              ...myInfo?.basket,\n              {\n                id: itemId.id,\n                product: itemId.product,\n                title: itemId.title,\n                price: itemId.price,\n                image: itemId.image,\n                quanity: quanity ? quanity : 1,\n                check: true,\n              },\n            ],\n          });\n        } else {\n          const fbFilter = myInfo?.basket?.filter(\n            (item) => item.product !== itemId.product\n          );\n          await updateDoc(docRef, {\n            basket: fbFilter,\n          });\n        }\n      }\n    };\n  // [currentBasket, dispatch, docRef, isLogin, myInfo?.basket]\n  // );\n\n  return { toggleIcon, currentBasket, docRef, myInfo };\n};\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useInfiniteQuery, useQueryClient } from \"react-query\";\n\n// 무한 스크롤\nconst useInfinityScroll = (url, count) => {\n  const queryClient = useQueryClient();\n\n  // 라우터 이탈 시 데이터 clean up으로 직접 리셋\n  useEffect(() => {\n    return () => {\n      queryClient.setQueryData([\"infiniteProduct\", url], (data) => ({\n        pages: data?.pages.slice(0, 1),\n        pageParams: data?.pageParams?.slice(0, 1),\n      }));\n    };\n  }, [url]);\n\n  const fetchRepositories = async (page) => {\n    const res = await axios.get(`${url}limit=${count}&page=${page}`);\n    return res.data;\n  };\n\n  const {\n    data: dataList,\n    hasNextPage,\n    fetchNextPage,\n  } = useInfiniteQuery(\n    [\"infiniteProduct\", url],\n    ({ pageParam = 1 }) => {\n      return fetchRepositories(pageParam);\n    },\n    {\n      refetchOnWindowFocus: false,\n      getNextPageParam: (lastPage, allPages) => {\n        const nextPage = allPages.length + 1; //\n        return nextPage ? nextPage : undefined; // 다음 데이터가 있는지 없는지 판단\n      },\n    }\n  );\n\n  const { ref, inView } = useInView();\n\n  useEffect(() => {\n    if (inView && hasNextPage) {\n      fetchNextPage();\n    }\n  }, [fetchNextPage, hasNextPage, inView, url]);\n\n  return { ref, dataList };\n};\n\nexport default useInfinityScroll;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["api","useBasketToggle","toggleIcon","currentBasket","useInfinityScroll","ref","dataItem","dataList","ListBox","pages","flat","map","list","index","ListItem","ListItemNumberBox","ListItemRank","ListItemNumber","ProductBox","to","product","ProductImage","src","image","alt","title","loading","ProductTextBox","ProductText","ProductPrice","price","ProductBag","onClick","filter","obj","length","style","position","bottom","styled","dispatch","useDispatch","useState","myInfo","setMyInfo","docRef","setDocRef","setIsLogin","useSelector","state","user","basket","currentUser","useEffect","uid","doc","dbService","toString","onSnapshot","data","itemId","quanity","undefined","find","item","setBasket","id","check","currentFilter","updateDoc","fbFilter","url","count","queryClient","useQueryClient","setQueryData","slice","pageParams","fetchRepositories","page","axios","res","useInfiniteQuery","pageParam","refetchOnWindowFocus","getNextPageParam","lastPage","allPages","nextPage","hasNextPage","fetchNextPage","useInView","inView","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","key","root","has","set","get","createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setRef","setState","current","entryTarget","_state$entry","result"],"sourceRoot":""}